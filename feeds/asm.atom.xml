<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wise Turtles</title><link href="http://blog.wiseturtles.com/" rel="alternate"></link><link href="http://blog.wiseturtles.com/feeds/asm.atom.xml" rel="self"></link><id>http://blog.wiseturtles.com/</id><updated>2016-06-17T20:00:00+08:00</updated><entry><title>Ubuntu+Vim配置汇编程序开发环境</title><link href="http://blog.wiseturtles.com/posts/setup-asm-development-environment.html" rel="alternate"></link><published>2016-06-17T20:00:00+08:00</published><updated>2016-06-17T20:00:00+08:00</updated><author><name>ox0spy</name></author><id>tag:blog.wiseturtles.com,2016-06-17:posts/setup-asm-development-environment.html</id><summary type="html">&lt;p&gt;本文专门介绍Ubuntu系统上基于Vim配置汇编程序开发环境。&lt;/p&gt;
&lt;h2&gt;Ubuntu系统配置&lt;/h2&gt;
&lt;p&gt;所有开发都在Ubuntu上完成，需要用的软件包：binutils, gcc,&amp;nbsp;gdb等软件。&lt;/p&gt;
&lt;p&gt;Ubuntu上安装软件很方便，指令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install binutils gcc gdb libc6-i386 libc6-dev-i386
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Vim配置&lt;/h2&gt;
&lt;p&gt;个人比较喜欢&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;，根据项目的安装文档安装即可。&lt;/p&gt;
&lt;p&gt;汇编源代码的基本结构类似，每次都写一遍 &lt;code&gt;.section .data&lt;/code&gt; 之类的很麻烦，通过下面补丁，新建汇编源文件时，自动加载模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/vimrc b/vimrc&lt;/span&gt;
&lt;span class="gh"&gt;index e073d53..596bcc1 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/vimrc&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/vimrc&lt;/span&gt;
&lt;span class="gu"&gt;@@ -580,7 +580,7 @@ autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,pe&lt;/span&gt;


&amp;quot; 定义函数AutoSetFileHead，自动插入文件头
&lt;span class="gd"&gt;-autocmd BufNewFile *.sh,*.py exec &amp;quot;:call AutoSetFileHead()&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+autocmd BufNewFile *.sh,*.py,*.s exec &amp;quot;:call AutoSetFileHead()&amp;quot;&lt;/span&gt;
function! AutoSetFileHead()
    &amp;quot;如果文件类型为.sh文件
    if &amp;amp;filetype == &amp;#39;sh&amp;#39;
&lt;span class="gu"&gt;@@ -593,9 +593,23 @@ function! AutoSetFileHead()&lt;/span&gt;
        call append(1, &amp;quot;\# encoding: utf-8&amp;quot;)
    endif

&lt;span class="gd"&gt;-    normal G&lt;/span&gt;
&lt;span class="gd"&gt;-    normal o&lt;/span&gt;
&lt;span class="gd"&gt;-    normal o&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;quot;如果文件类型为asm&lt;/span&gt;
&lt;span class="gi"&gt;+    if &amp;amp;filetype == &amp;#39;asm&amp;#39;&lt;/span&gt;
&lt;span class="gi"&gt;+        call setline(1, &amp;quot;.section .data&amp;quot;)&lt;/span&gt;
&lt;span class="gi"&gt;+        call append(1, &amp;quot;.section .text&amp;quot;)&lt;/span&gt;
&lt;span class="gi"&gt;+        call append(2, &amp;quot;.globl _start&amp;quot;)&lt;/span&gt;
&lt;span class="gi"&gt;+        call append(3, &amp;quot;_start:&amp;quot;)&lt;/span&gt;
&lt;span class="gi"&gt;+    endif&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+    if &amp;amp;filetype == &amp;#39;asm&amp;#39;&lt;/span&gt;
&lt;span class="gi"&gt;+        normal G&lt;/span&gt;
&lt;span class="gi"&gt;+        normal o&lt;/span&gt;
&lt;span class="gi"&gt;+    else&lt;/span&gt;
&lt;span class="gi"&gt;+        normal G&lt;/span&gt;
&lt;span class="gi"&gt;+        normal o&lt;/span&gt;
&lt;span class="gi"&gt;+        normal o&lt;/span&gt;
&lt;span class="gi"&gt;+    endif&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
endfunc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在Ubuntu&amp;nbsp;64位系统上编译、运行32位汇编&lt;/h2&gt;
&lt;p&gt;之前提到过我学习的参考书籍讲的是32位&lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T汇编，而我的系统是64位，所以，这里介绍在64位Ubuntu上编译、运行32位汇编程序需要做那些配置。&lt;/p&gt;
&lt;h3&gt;64位Ubuntu编译、链接32位汇编程序&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;~/.bashrc&lt;/code&gt; 中添加下面的行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# asm i386
alias as=&amp;#39;as --32 -gstabs&amp;#39;
alias ld=&amp;#39;ld -m elf_i386&amp;#39;
alias gcc=&amp;#39;gcc -m32&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次输入指令编译、运行、查看返回值也很麻烦，可以写个脚本自动完成这些工作，参考：&lt;a href="http://blog.wiseturtles.com/posts/Compile-Link-and-Run-ASM-Program.html"&gt;编译、链接、运行汇编程序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面链接中提到的那坨脚本基本可以用 &lt;code&gt;gcc -m32 -o myhello myhello.s&lt;/code&gt; 代替😂&lt;/li&gt;
&lt;li&gt;如果用上面的gcc指令编译汇编代码，只能在汇编代码中使用&lt;code&gt;.globl main&lt;/code&gt;；而不能使用as默认的&lt;code&gt;.globl _start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Vim&lt;/h3&gt;
&lt;h4&gt;asm在Vim中的语法检查&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/wklken/k-vim"&gt;k-vim&lt;/a&gt;使用&lt;code&gt;syntastic&lt;/code&gt;做语法检查，&lt;code&gt;syntastic&lt;/code&gt;对asm源码默认检查会使用&lt;code&gt;as&lt;/code&gt;编译源码，如果不指定&lt;code&gt;as --32&lt;/code&gt;有些32位处理器特有的指令会引起报错。&lt;/p&gt;
&lt;p&gt;现象就是每次在Vim中&lt;code&gt;:w&lt;/code&gt;保存时，可能会报：&lt;code&gt;Error: invalid instruction suffix for 'push'&lt;/code&gt; 或 &lt;code&gt;Error: 'jcxz' is not supported in 64-bit mode&lt;/code&gt; 之类的错误。&lt;/p&gt;
&lt;p&gt;可以在vim配置中指定&lt;code&gt;g:syntastic_asm_compiler_options&lt;/code&gt;参数，避免错误，补丁如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/vimrc.bundles b/vimrc.bundles&lt;/span&gt;
&lt;span class="gh"&gt;index c7428e8..7a4555d 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/vimrc.bundles&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/vimrc.bundles&lt;/span&gt;
&lt;span class="gu"&gt;@@ -299,6 +299,9 @@ call plug#end()&lt;/span&gt;
    &amp;quot; let g:syntastic_javascript_checkers = [&amp;#39;jsl&amp;#39;, &amp;#39;jshint&amp;#39;]
    &amp;quot; let g:syntastic_html_checkers=[&amp;#39;tidy&amp;#39;, &amp;#39;jshint&amp;#39;]

&lt;span class="gi"&gt;+    &amp;quot; FIXME: if asm, 在64位系统上写32位汇编才需要&lt;/span&gt;
&lt;span class="gi"&gt;+    let g:syntastic_asm_compiler_options = &amp;quot;--32&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：参考syntastic文档 - &lt;a href="https://github.com/scrooloose/syntastic/wiki/ASM:---gcc"&gt;&lt;span class="caps"&gt;ASM&lt;/span&gt;:&amp;nbsp;gcc&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;64位Ubuntu通过gcc生成C代码对应的32位汇编代码&lt;/h3&gt;
&lt;p&gt;直接通过gcc生成C代码对应的汇编代码只需&lt;code&gt;gcc -S&lt;/code&gt;，但生成32位汇编代码就需要：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc -m32 -S hello.c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：需要安装&lt;code&gt;libc6-dev-i386&lt;/code&gt;，否则会报错。&lt;/p&gt;</summary><category term="asm"></category><category term="Linux"></category><category term="Vim"></category></entry><entry><title>编译、链接、运行汇编程序</title><link href="http://blog.wiseturtles.com/posts/Compile-Link-and-Run-ASM-Program.html" rel="alternate"></link><published>2016-06-17T00:09:00+08:00</published><updated>2016-06-17T00:09:00+08:00</updated><author><name>ox0spy</name></author><id>tag:blog.wiseturtles.com,2016-06-17:posts/Compile-Link-and-Run-ASM-Program.html</id><summary type="html">&lt;p&gt;学习汇编过程中每次输入as,&amp;nbsp;ld的一堆命令行参数编译、链接程序实在很麻烦。&lt;/p&gt;
&lt;p&gt;所以，写个小脚本完成汇编程序的编译、链接及运行。&lt;/p&gt;
&lt;h2&gt;脚本介绍&lt;/h2&gt;
&lt;p&gt;脚本内容如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash -e&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; usage&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usage: &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;asm-file-path&amp;gt;, the &amp;lt;asm-file-path&amp;gt; must end by &amp;#39;.s&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; 0
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -ne &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; usage

&lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -Eq &lt;span class="s1"&gt;&amp;#39;\.s$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    usage
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -f &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can not access the asm source code: &amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&amp;quot;&lt;/span&gt;
    usage
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$src&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename -s &lt;span class="s1"&gt;&amp;#39;.s&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$src&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;basename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.o&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$basename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;as_opts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--32 -gstabs&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# -gstabs: 使用该参数可以通过gdb调试代码&lt;/span&gt;
&lt;span class="nv"&gt;ld_opts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m elf_i386&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# check if .global label is not the default &amp;quot;_start&amp;quot;; if not &amp;quot;_start&amp;quot;, then using &amp;quot;-e label&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;global_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep -Eo &lt;span class="s1"&gt;&amp;#39;\.globl\s+\w+&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$src&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $NF}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; x&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$global_label&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; x&lt;span class="s2"&gt;&amp;quot;_start&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;ld_opts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ld_opts&lt;/span&gt;&lt;span class="s2"&gt; -e &lt;/span&gt;&lt;span class="nv"&gt;$global_label&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# if asm source code invoke C stdlib, then link C stdlib&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; grep -qE &lt;span class="s1"&gt;&amp;#39;\s+call\s+\w+&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$src&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;ld_opts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ld_opts&lt;/span&gt;&lt;span class="s2"&gt; -lc -dynamic-linker /lib32/ld-linux.so.2&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;as &lt;/span&gt;&lt;span class="nv"&gt;$as_opts&lt;/span&gt;&lt;span class="s2"&gt; -o &lt;/span&gt;&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$src&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
as &lt;span class="nv"&gt;$as_opts&lt;/span&gt; -o &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="nv"&gt;$src&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ld &lt;/span&gt;&lt;span class="nv"&gt;$ld_opts&lt;/span&gt;&lt;span class="s2"&gt; -o &lt;/span&gt;&lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
ld &lt;span class="nv"&gt;$ld_opts&lt;/span&gt; -o &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;

&lt;span class="c1"&gt;# `set +e` 命令执行返回值不为零也不退出程序&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; +e
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;run &lt;/span&gt;&lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt; ...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$bin&lt;/span&gt;
&lt;span class="c1"&gt;# 显示执行汇编程序的返回值&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;return value: &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# `set -e` 重新开启命令执行返回值不为零就退出程序&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;注：上篇文章已经讲过学习资料是&lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T 32位汇编，而个人电脑是64位系统，所以，指定了 &lt;code&gt;as --32&lt;/code&gt; 和 &lt;code&gt;ld -m elf_i386&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;如何使用呢?&lt;/h2&gt;
&lt;p&gt;将脚本放入 &lt;code&gt;~/bin/&lt;/code&gt; 目录内，并设置可执行权限 &lt;code&gt;chmod +x ~/bin/asm-run.sh&lt;/code&gt;，然后将 &lt;code&gt;$HOME/bin&lt;/code&gt; 加入 &lt;code&gt;$PATH&lt;/code&gt; 环境变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=$HOME/bin:$PATH&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以在任意目录中直接通过 &lt;code&gt;asm-run.sh&lt;/code&gt; 运行脚本了。&lt;/p&gt;
&lt;p&gt;假如现在有&lt;code&gt;myhello.s&lt;/code&gt;的汇编源码，通过该脚本编译运行的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ asm-run.sh myhello.s
as --32 -o ./myhello.o myhello.s
ld -m elf_i386 -e main -lc -dynamic-linker /lib32/ld-linux.so.2 -o ./myhello ./myhello.o
run ./myhello ...
Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;终于不用一遍一遍的输入指令编译、链接、运行汇编程序了。&lt;/p&gt;</summary><category term="asm"></category><category term="Linux"></category></entry><entry><title>在64位机器上编写、运行32位汇编代码</title><link href="http://blog.wiseturtles.com/posts/Write-32bit-asm-program-and-run-on-64bit-machine.html" rel="alternate"></link><published>2016-06-16T12:37:00+08:00</published><updated>2016-06-16T12:37:00+08:00</updated><author><name>ox0spy</name></author><id>tag:blog.wiseturtles.com,2016-06-16:posts/Write-32bit-asm-program-and-run-on-64bit-machine.html</id><summary type="html">&lt;p&gt;我按照 &lt;code&gt;&amp;lt;&amp;lt;professional assembly language&amp;gt;&amp;gt;&lt;/code&gt;（中文名为：编译语言程序设计) 学习汇编，但使用pushl在我的Ubuntu 64bit上报错&lt;code&gt;Error: invalid instruction suffix for 'push'&lt;/code&gt;。
Google一圈发现需要在代码头部加上&lt;code&gt;.code32&lt;/code&gt;，并且ld时需要额外指定些参数。&lt;/p&gt;
&lt;h2&gt;安装libc6-i386&lt;/h2&gt;
&lt;p&gt;ld链接时会用到libc-i386，所以，先安装并做个软链接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install libc6-i386
$ sudo ln -s /lib32/libc-2.19.so /lib32/libc.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：不做软链接可能会导致&lt;code&gt;ld -lc&lt;/code&gt;报错：&lt;code&gt;ld: cannot find -lc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;在64位机器上编译、链接、运行32位汇编代码&lt;/h2&gt;
&lt;p&gt;源代码如下，代码中调用printf输出&lt;code&gt;Hello World\n&lt;/code&gt;，然后调用exit(0)退出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat myhello.s
&lt;span class="c1"&gt;#myhello.s Just output &amp;quot;Hello World\n&amp;quot;&lt;/span&gt;
.code32
.section .data
msg:
    .asciz &lt;span class="s2"&gt;&amp;quot;Hello World\n&amp;quot;&lt;/span&gt;
.section .text
.globl main
main:
    pushl &lt;span class="nv"&gt;$msg&lt;/span&gt;
    call &lt;span class="nb"&gt;printf&lt;/span&gt;
    addl &lt;span class="nv"&gt;$4&lt;/span&gt;, %esp
    pushl &lt;span class="nv"&gt;$0&lt;/span&gt;
    call &lt;span class="nb"&gt;exit&lt;/span&gt;

$ as --32 -o myhello.o myhello.s
$ ld -e main -m elf_i386 -L/lib32 -lc -dynamic-linker /lib32/ld-linux.so.2 -o myhello myhello.o
$ ./myhello
Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as --32&lt;/code&gt; 指定生成32位object文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ld -e main&lt;/code&gt; 因为程序中用了&lt;code&gt;.globl main&lt;/code&gt; 而非 &lt;code&gt;.globl _start&lt;/code&gt;，所以，用它指定汇编入口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ld -m elf_i386&lt;/code&gt; 指定生成elf&amp;nbsp;i386&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L/lib32 -lc&lt;/code&gt;指定从&lt;code&gt;/lib32&lt;/code&gt;目录下找&lt;code&gt;libc.so&lt;/code&gt;；可以简写为&lt;code&gt;-lc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-dynamic-linker /lib32/ld-linux.so.2&lt;/code&gt; 指定操作系统用来动态地查找和加载库文件的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;设置bash&amp;nbsp;alias&lt;/h2&gt;
&lt;p&gt;每次都需要输入&lt;code&gt;as --32&lt;/code&gt;和&lt;code&gt;ld -m elf_i386&lt;/code&gt;很麻烦，我们可以通过bash&amp;nbsp;alias简化输入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail -2 ~/.bashrc
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;as --32&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ld -m elf_i386&amp;#39;&lt;/span&gt;
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
$ as -o myhello.o myhello.s
$ ld -e main -lc -dynamic-linker /lib32/ld-linux.so.2 -o myhello myhello.o
$ ./myhello
Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就方便多了，当然也可以根据个人喜好把其它参数一起加入alias中。&lt;/p&gt;</summary><category term="asm"></category><category term="Linux"></category></entry><entry><title>Write Your First ASM Program</title><link href="http://blog.wiseturtles.com/posts/Write-Your-First-ASM-Program.html" rel="alternate"></link><published>2016-06-15T22:09:00+08:00</published><updated>2016-06-15T22:09:00+08:00</updated><author><name>ox0spy</name></author><id>tag:blog.wiseturtles.com,2016-06-15:posts/Write-Your-First-ASM-Program.html</id><summary type="html">&lt;p&gt;用汇编写个Hello&amp;nbsp;World，同时看看如何一步一步将c程序编译成可执行文件。&lt;/p&gt;
&lt;h2&gt;开发环境准备&lt;/h2&gt;
&lt;p&gt;所有开发都在Ubuntu上完成，需要用的软件包：binutils, gcc,&amp;nbsp;gdb。&lt;/p&gt;
&lt;p&gt;Ubuntu上安装软件很方便，指令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install binutils gcc gdb
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;asm Hello&amp;nbsp;World&lt;/h2&gt;
&lt;p&gt;用asm写个Hello World，&lt;code&gt;.data&lt;/code&gt;数据段中定义msg变量为 &lt;code&gt;"Hello World\n"&lt;/code&gt;，&lt;code&gt;.text&lt;/code&gt;指令段从&lt;code&gt;_start&lt;/code&gt;开始，否则需要ld时指定&lt;code&gt;-e label&lt;/code&gt;。&amp;nbsp;程序调用了printf输出msg，然后调用exit(0)退出。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat hello.s
&lt;span class="c1"&gt;#hello.s Just a Hello World in asm.&lt;/span&gt;
.section .data
msg:
    .ascii &lt;span class="s2"&gt;&amp;quot;Hello World\n&amp;quot;&lt;/span&gt;
.section .text
.globl _start
_start:
    movl &lt;span class="nv"&gt;$4&lt;/span&gt;, %eax
    movl &lt;span class="nv"&gt;$1&lt;/span&gt;, %ebx
    movl &lt;span class="nv"&gt;$msg&lt;/span&gt;, %ecx
    movl &lt;span class="nv"&gt;$12&lt;/span&gt;, %edx
    int &lt;span class="nv"&gt;$0&lt;/span&gt;x80
    movl &lt;span class="nv"&gt;$1&lt;/span&gt;, %eax
    movl &lt;span class="nv"&gt;$0&lt;/span&gt;, %ebx
    int &lt;span class="nv"&gt;$0&lt;/span&gt;x80
$ as -o hello.o hello.s
$ ld -o hello hello.o
$ ./hello
Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;如何一步一步编译、链接c程序&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat helloc.c
&lt;span class="c1"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

int main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    printf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    exit&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

$ gcc -S helloc.c
$ as -o helloc.o helloc.s
$ ld -e main -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o helloc helloc.o
$ ./helloc
Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc -S生成c代码对应的汇编代码，但是汇编代码中的&lt;code&gt;.globl label&lt;/code&gt;为main&lt;/li&gt;
&lt;li&gt;因为汇编代码的&lt;code&gt;.globl label&lt;/code&gt;是&lt;code&gt;main&lt;/code&gt;，所以必须使用&lt;code&gt;-e&lt;/code&gt;参数指定label为&lt;code&gt;main&lt;/code&gt;；默认是&lt;code&gt;_start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;因为汇编代码直接使用了c的库函数printf、exit，所以必须指定-lc链接c标准库&lt;/li&gt;
&lt;li&gt;-lc动态链接c标准库，所以，必须指定运行时加载动态库的程序，即：&lt;code&gt;-dynamic-linker /lib64/ld-linux-x86-64.so.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;asm Hello World&amp;nbsp;(改进版)&lt;/h2&gt;
&lt;p&gt;既然汇编代码中可以直接调用c的标准库函数，那就看看怎么改进之前的hello.s。
下面代码调用c库中的puts和exit函数。
可以用gcc编译、链接汇编代码，而gcc默认只认&lt;code&gt;.globl main&lt;/code&gt;而不是&lt;code&gt;.globl _start&lt;/code&gt;，所以，我们下面用&lt;code&gt;.globl main&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat new_hello.s
&lt;span class="c1"&gt;#new_hello.s Just a &amp;quot;Hello World&amp;quot;&lt;/span&gt;
.section .data
msg:
    .string &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
.section .text
.global main
main:
    movl &lt;span class="nv"&gt;$msg&lt;/span&gt;, %edi
    call puts
    movl &lt;span class="nv"&gt;$0&lt;/span&gt;, %edi
    call &lt;span class="nb"&gt;exit&lt;/span&gt;
$ as -o new_hello.o new_hello.s
$ ld -e main -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o new_hello new_hello.o
$ ./new_hello
Hello World

$ gcc -o new_hello new_hello.s  &lt;span class="c1"&gt;# 当然可以直接用这条指令编译、链接生成可执行文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本文简单介绍了如何用汇编写&lt;code&gt;Hello World&lt;/code&gt;，并尝试手动编译、链接c程序，最好介绍了在汇编中如何调用c库函数。&lt;/p&gt;</summary><category term="asm"></category><category term="Linux"></category></entry></feed>